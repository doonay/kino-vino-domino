PyTMDB3
=======

Этот модуль Python реализует API v3 для TheMovieDb.org, предоставляя доступ к информации о фильмах и актерах,
а также к связанным произведениям искусства. Дополнительную информацию можно найти по адресу:
http://help.themoviedb.org/kb/api/about-3

Начальный доступ
-------------- 
Для доступа к API требуется персональный ключ. (b4ce63bd08fd5898313dd68dbd5dff18)
Вы можете создать его, зарегистрировав учетную запись на TheMovieDb.org и сгенерировав ее на странице сведений об учетной записи.
После этого модуль PyTMDB3 должен получить этот ключ следующим образом:
>>> from tmdb3 import set_key
>>> set_key('your_api_key')

кэширования
--------------
Чтобы ограничить чрезмерное использование против онлайн-сервера API, модуль PyTMDB3 поддерживает кэширование запросов.
Кэшированные данные извлекаются из URL-адреса запроса и в настоящее время хранятся в течение одного часа.
Запросы API ограничены тридцатью (30) в течение десяти (10) секунд.
Запросы, превышающие этот предел, блокируются до тех пор, пока они не будут обработаны.

В настоящее время доступны два двигателя.
Движок `null` просто отбрасывает всю информацию и предназначен только для отладки.
Движок `file` используется по умолчанию и будет храниться в` / tmp / pytmdb3.cache`, если не настроено иное.
Механизм кеширования можно настроить следующим образом.

>>> from tmdb3 import set_cache
>>> set_cache('null')
>>> set_cache(filename='/full/path/to/cache') # the 'file' engine is assumed
>>> set_cache(filename='tmdb3.cache') # relative paths are put in /tmp
>>> set_cache(engine='file', filename='~/.tmdb3cache')

Конфигурация локали
--------------------
Предыдущий API v2 поддерживал выбор языка, но не работал вплоть до значений по умолчанию для любых полей, не имевших значений для конкретного языка.
Не v3 API больше не выполняет эту провалиться, оставив его клиентам , чтобы при необходимости осуществить это самостоятельно.

Модуль PyTMDB3 поддерживает использование локалей двумя разными способами.
Один может определить глобальную локаль, автоматически используется,
если не указано в обратного или конкретная локаль может быть предоставлена ​​непосредственно для поиска и запросов данных с использованием аргумента ключевого слова `locale =`, который затем распространяется через любые последующие запросы, сделанные через эти объекты.

Настройки локали управляются двумя функциями

>>> from tmdb3 import get_locale, set_locale
>>> get_locale()
<Locale None_None>
>>> set_locale()
>>> get_locale()
<Locale en_US>
>>> set_locale('en', 'gb')
>>> get_locale()
<Locale en_GB>
>>> get_locale('fr', 'fr')
<Locale fr_FR>

* `set_locale ()` используется для установки глобального языкового стандарта по умолчанию.
Опционально принимает Аргументы ключевых слов `language` и` country`.
Если не указан, он попытается извлечь такую ​​информацию из вашей среды.
Он также принимает аргумент ключевого слова `fallthrough`, который используется для управления пропуском фильтра по языку и стране.
По умолчанию это отключено, то есть, если установлен язык, он будет возвращать только информацию, относящуюся к этому языку.

* `get_locale ()` также принимает необязательные аргументы ключевого слова `language` и` country` и может использоваться для генерации локалей для прямого использования, переопределяя глобальную конфигурацию.
Если ничего не указано, вместо этого возвращается глобальная конфигурация.
Обратите внимание, что поведение при провале применяется ко всему модулю, и отдельные языковые стандарты не могут использоваться для изменения этого поведения.

Аутентификация
--------------
Это пока не поддерживается.

Поиск
---------
В настоящее время доступно шесть методов поиска: «фильмы», «люди», «студии», «списки», «коллекции» и «сериалы».
Результаты поиска от TheMovieDb отправляются итеративно, двадцать результатов на страницу.
Методы поиска, предоставляемые модулем PyTMDB3, возвращают структуры в виде списков, которые автоматически захватывают новые страницы по мере необходимости.

>>> from tmdb3 import searchMovie
>>> res = searchMovie('A New Hope')
>>> res
<Search Results: A New Hope>
>>> len(res)
4
>>> res[0]
<Movie 'Star Wars: Episode IV - A New Hope' (1977)>

Метод movieSearch() принимает ключевое слово adult, чтобы разрешить возврат контента для взрослых.
По умолчанию установлено значение False, и такое содержимое отфильтровывается. Аналогично ведет себя и метод поиска людей.

>>> from tmdb import searchPerson
>>> res = searchPerson ('Hanks')
>>> res
<Результаты поиска: Hanks>
>>> res [0]
<Person 'Tom Hanks'>

>>> from tmdb import searchStudio
> >> res = searchStudio ('Sony Pictures')
>>> res
<Результаты поиска: Sony Pictures>
>>> res [0]
<Studio 'Sony Pictures'>


фильтр для фильмов только этого года. Существует вспомогательный метод,
`movieSearchWithYear ()`, который обрабатывает год выпуска из
названий фильмов, где год содержится в скобках, например:

>>> from tmdb import searchMovieWithYear
>>> list (searchMovieWithYear ('Star Wars ( 1977) '))
[<Фильм "Звездные войны: Эпизод IV - Новая надежда" (1977)>, <Фильм "Создание" Звездных войн "(1977)>]


Прямые запросы
-------- ------

В настоящее время существует четыре типа данных, которые поддерживают прямой доступ: `Collection`s,
` Movie`s, `Person`s и` Studio`s. Каждый из них принимает в качестве
аргумента один целочисленный идентификатор . Все атрибуты данных реализованы как свойства и заполнены
по запросу, а не при создании объекта.

>>> from tmdb3 import Коллекция, Фильм, Персона, Студия
>>> Коллекция (10)
<Коллекция 'Star Wars Collection'>
>>> Фильм (11)
<Фильм 'Звездные войны: Эпизод IV - Новая надежда' (1977 )>
>>> Person (2)
<Person 'Mark Hamill'>
>>> Studio (1)
<Studio 'Lucasfilm'>

Класс `Genre` не может быть вызван напрямую по id, однако у него есть
метод класса` getAll` , способный вернуть все доступные жанры для указанного
языка.

Поведение изображения
--------------

TheMovieDb в настоящее время предлагает три типа иллюстраций:
профили. Каждый из трех вышеперечисленных запросов к данным будет содержать один из них по умолчанию
и, возможно, список дополнительных элементов на выбор. Каждый из них может быть загружен
напрямую или с одним из нескольких предварительно масштабированных уменьшенных разрешений. Модуль PyTMDB3
предоставляет список доступных размеров и генерирует URL-адрес для загрузки
запрошенного размера. Недопустимые размеры возвращают ошибку.

>>> from tmdb3 import Movie
>>> p = Movie (11) .poster
>>> p
<Poster 'tvSlBzAdRE29bZe5yYWrJ2ds137.jpg'>
>>> p.sizes ()
[u'w92 ', u'w154', u 'w185', u'w342 ', u'w500', u'original ']
>>> p.geturl ()
u'http: //cf2.imgobject.

u'http: //cf2.imgobject.com/t/p/w342/tvSlBzAdRE29bZe5yYWrJ2ds137.jpg '
>>> p.geturl (' w300 ')
Traceback (последний вызов последним):
файл "<stdin>", строка 1 , в <module>
файле "tmdb3 / tmdb_api.py", строка 101, в geturl
raise TMDBImageSizeError
tmdb3.tmdb_exceptions.TMDBImageSizeError: None

Trailers
--------

TheMovieDb предлагает доступ к трейлерам на Youtube и Apple, однако их использование
немного отличается. Трейлеры Youtube предлагают отдельный файл, а
трейлеры Apple - нескольких размеров.

>>> from tmdb3 import Movie
>>> movie = Movie (27205)
>>> movie.youtube_trailers
[<YoutubeTrailer 'Trailer 1'>, <YoutubeTrailer 'Trailer 2'>]
>>> movie.youtube_trailers [0] .geturl ()
'http://www.youtube.com/watch?v=suIIHZqDR30'
>>> movie.apple_trailers
[<AppleTrailer 'Teaser'>, <AppleTrailer 'Trailer 1'>, <AppleTrailer 'Trailer 2'>]
>>> movie.apple_trailers [0] .sizes ()
[u'480p ', u'720p' , u'1080p ']
>>> movie.apple_trailers [0] .geturl ()
u'http: //pdl.warnerbros.com/wbmovies/inception/Inception_TRL1_1080.mov'
>>> movie.apple_trailers [0] .geturl ()
u'http: //pdl.warnerbros.com/wbmovies/inception/Inception_TRL1_480.mov '

Список доступных данных
----------------------

#### Сбор:

| тип | имя |
| ----------------------- | -------------------- |
| целое | id |
| строка | имя |
| строка | обзор |
| Фон | фон |
| Плакат | плакат |
| список (фильм) | члены |
| список (Фон) | фоны |
| список (Плакат) | плакаты |

#### Фильм:
| тип | имя | заметки |
| ----------------------- | -------------------- | ---- ------------------------------------ |
| целое | id | |
| строка | название | специфический язык |
| строка | originaltitle | язык происхождения |
| строка | слоган | |
| строка | обзор | |
| целое | время выполнения | |
| целое | бюджет | |
| целое | доход | |
| datetime | Releaseate | |
| строка | домашняя страница | |
| строка | Идентификатор ссылки IMDB | 'ttXXXXXXX' |
| Фон | фон | |
| Плакат | плакат | |
| плавать | популярность | |
| плавать | пользовательская оценка | |
| целое | голосов | |
| логическое | взрослый | |
| Коллекция | сборник | |
| список (Жанр) | жанры | |
| список (Студия) | студии | |
| список (Страна) | страны | |
| список (язык) | языки | |
| список (Альтернативный заголовок) | alternate_title | |
| список (Cast) | литье | отсортировано по биллингу |
| список (экипаж) | экипаж | |
| список (Фон) | фоны | |
| список (Плакат) | плакаты | |
| список (ключевое слово) | ключевые слова | |
| dict (Выпуск) | релизы | индексируется по стране |
| список (Перевод) | переводы | |
| список (фильм) | похожие | |
| список (Список) | списки | |
| список (фильм) | getSimilar () | |
| Нет | setFavorite (bool) | отметить статус избранного для текущего пользователя |
| Нет | setRating (int) | оценить фильм текущим пользователем |
| Нет | setWatchlist (bool) | отметить статус списка наблюдения для текущего пользователя |

#### Метод класса фильма:
| тип | имя | заметки |
| ----------------------- | -------------------- | ---- ----------------------------------------- |
| Фильм | fromIMDB (imdbid) | специальный конструктор для использования с кодами IMDb |
| Фильм | последний () | добавлен последний фильм в базу данных |
| список (фильм) | nowplaying () | контент, который сейчас находится в театре |
| список (фильм) | самый популярный () | на основе количества просмотров страниц themoviedb.org |
| список (фильм) | с рейтингом () | на основе оценок пользователей themoviedb.org |
| список (фильм) | предстоящие () | кураторский список, обычно содержит 100 фильмов |
| список (фильм) | избранное () | любимые фильмы текущего пользователя |
| список (фильм) | рейтинговые фильмы () | фильмы, оцененные текущим пользователем |
| список (фильм) | список наблюдения () | фильмы, отмеченные для просмотра текущим пользователем |

#### Серия:
| тип | имя |
| ----------------------- | -------------------- |
| целое | id |
| строка | имя |
| строка | исходное_имя |
| строка | обзор |
| строка | домашняя страница |
| целое | number_of_seasons |
| целое | number_of_episodes |
| плавать | популярность |
| плавать | пользовательская оценка |
| целое | голосов |
| datetime | first_air_date |
| datetime | last_air_date |
| bool | inproduction |
| строка | статус |
| Фон | фон |
| Плакат | плакат |
| строка | imdb_id |
| строка | freebase_id |
| строка | freebase_mid |
| строка | tvdb_id |
| строка | tvrage_id |
| список (человек) | авторы |
| список (дата и время) | Episode_run_time |
| список (Жанр) | жанры |
| список (строка) | языки |
| список (строка) | origin_countries |
| список (Сеть) | сети |
| список (сезон) | сезоны |
| список (Cast) | литье |
| список (экипаж) | экипаж |
| список (Фон) | фоны |
| список (Плакат) | плакаты |
| список (Серия) | похожие |
| список (ключевое слово) | ключевые слова |

#### Сезон:
| тип | имя |
| ----------------------- | -------------------- |
| целое | id |
| строка | имя |
| datetime | air_date |
| строка | обзор |
| целое | series_id |
| целое | Season_number |
| Плакат | плакат |
| строка | freebase_id |
| строка | freebase_mid |
| строка | tvdb_id |
| строка | tvrage_id |
| список (Плакат) | плакаты |
| список (Эпизод) | эпизоды |

#### Эпизод:

| тип | имя |
| ----------------------- | -------------------- |
| целое | id |
| целое | series_id |
| целое | Season_number |
| целое | Episode_number |
| строка | имя |
| строка | обзор |
| плавать | пользовательский рейтинг |
| целое | голосов |
| datetime | air_date |
| строка | production_code |
| Фон | еще |
| строка | freebase_id |
| строка | freebase_mid |
| строка | tvdb_id |
| строка | tvrage_id |
| список (Фон) | кадры |
| список (Cast) | литье |
| список (Cast) | guest_stars |
| список (экипаж) | экипаж |

#### Список:

| тип | имя | заметки |
| ----------------------- | -------------------- | ---- ----------------------------------- |
| шестнадцатеричная строка | id | |
| строка | имя | |
| строка | автор | |
| строка | описание | |
| целое | избранное | количество пользователей, отметивших список |
| строка | язык | |
| целое | счет | |
| Плакат | плакат | |
| список (фильм) | члены | |

#### Человек:

| тип | имя |
| ----------------------- | -------------------- |
| целое | id |
| строка | имя |
| строка | биография |
| datetime | день рождения |
| datetime | день смерти |
| строка | домашняя страница |
| Профиль | профиль |
| логическое | взрослый |
| список (строка) | псевдонимы |
| список (ReverseCast) | роли |
| список (ReverseCrew) | экипаж |
| список (Профиль) | профили |

#### Приведение (производное от `Person`):

| тип | имя | заметки |
| ----------------------- | -------------------- | ---- ------------------- |
| строка | персонаж | |
| целое | заказ | как указано в титрах |

#### Команда (производное от `Человек`):

| тип | имя |
| ----------------------- | -------------------- |
| строка | работа |
| строка | отдел |

#### ReverseCast (производный от `Movie`):

| тип | имя |
| ----------------------- | -------------------- |
| строка | персонаж |

#### ReverseCrew (производный от `Movie`):

| тип | имя |
| ----------------------- | -------------------- |
| строка | работа |
| строка | отдел |

#### Изображение:

| тип | имя | заметки |
| ----------------------- | ------------------------- | ---------------------------------- |
| строка | имя файла | произвольный буквенно-цифровой код |
| плавать | аспектрацио | недоступно для изображений по умолчанию |
| целое | высота | недоступно для изображений по умолчанию |
| целое | ширина | недоступно для изображений по умолчанию |
| целое | язык | недоступно для изображений по умолчанию |
| плавать | пользовательский рейтинг | |
| целое | голосов | |
| список (строка) | размеры () | |
| строка | geturl (size = 'original') | |

Фон (производный от `Image`)
Плакат (производный от` Image`)
Профиль (производный от `Image`)
Логотип (производный от` Image`)

#### AlternateTitle:

| тип | имя |
| ----------------------- | -------------------- |
| строка | страна |
| строка | название |

#### Релиз:

| тип | имя |
| ----------------------- | -------------------- |
| строка | сертификация |
| строка | страна |
| datetime | Releaseate |

#### Перевод:

| тип | имя |
| ----------------------- | -------------------- |
| строка | имя |
| строка | englishname |
| строка | язык |

#### Жанр:

| тип | имя |
| ----------------------- | -------------------- |
| целое | id |
| строка | имя |
| список (фильм) | фильмы |

#### Методы жанрового класса:

| тип | имя | заметки |
| ----------------------- | -------------------- | ---- ------------------------ |
| список (Жанр) | getAll (язык) | возвращает список всех жанров |

#### Студия:

| тип | имя |
| ----------------------- | -------------------- |
| целое | id |
| строка | имя |
| строка | описание |
| строка | штаб-квартира |
| Логотип | логотип |
| Студия | родитель |
| список (фильм) | фильмы |

#### Сеть:

| тип | имя |
| ----------------------- | -------------------- |
| целое | id |
| строка | имя |

#### Страна:

| тип | имя |
| ----------------------- | -------------------- |
| строка | код |
| строка | имя |

#### Язык:

| тип | имя |
| ----------------------- | -------------------- |
| строка | код |
| строка | имя |

#### Трейлер:

| тип | имя |
| ----------------------- | -------------------- |
| строка | имя |
| строка | размер |
| строка | источник |

#### YoutubeTrailer (производный от `Trailer`)

| тип | имя |
| ----------------------- | -------------------- |
| строка | geturl () |

#### AppleTrailer

| тип | имя | заметки |
| ---------------------- | --------------------- | ---- ------------- |
| строка | имя | |
| dict (трейлер) | источники | индексируется по размеру |
| список (строка) | размеры () | |
| строка | geturl (size = None) | |


























https://pypi.org/project/tmdbv3api/

A lightweight Python library for The Movie Database (TMDb) API. 
The TMDb API is a resource for developers to integrate movie, TV show and cast data along with posters or movie fan art. 
themoviedb.org is a free and community edited database.

Register an account: https://www.themoviedb.org/account/signup
Check out the API documentation: https://developers.themoviedb.org/3/getting-started/introduction

Install
tmdbv3api is available on the Python Package Index (PyPI) at https://pypi.python.org/pypi/tmdbv3api

You can install tmdbv3api using pip.
$ pip install tmdbv3api
Usage
The first step is to initialize a TMDb object and set your API Key.

from tmdbv3api import TMDb
tmdb = TMDb()
tmdb.api_key = 'YOUR_API_KEY'
Alternatively, you can export your API key as an environment variable.

$ export TMDB_API_KEY='YOUR_API_KEY'
Other configuration settings include defining your language and enabling debug mode, for example:

tmdb.language = 'en'
tmdb.debug = True
Then to communicate with TMDb, create an instance of one of the objects and call that instances methods. For example, to retrieve movie recommendations for a given movie id:

from tmdbv3api import Movie

movie = Movie()



Examples




# Искать фильмы по названию.

search = movie.search('Mad Max')

for res in search:
    print(res.id)
    print(res.title)
    print(res.overview)
    print(res.poster_path)
    print(res.vote_average)

# Получить похожие фильмы для определенного идентификатора фильма.

similar = movie.similar(777)

for result in similar:
    print(result.title)
    print(result.overview)

# Ищите телешоу по названию.

tv = TV()
show = tv.search('Breaking Bad')

for result in show:
    print(result.name)
    print(result.overview)

# Получите похожие телешоу для определенного идентификатора ТВ.

similar = tv.similar(1396)

for show in similar:
    print(show.name)
    print(show.overview)

# Получите подробную информацию о телевизионном сезоне для определенного идентификатора телевизора.

season = Season()
show_season = season.details(1396, 1)
print(show_season.air_date)
print(len(show_season.episodes))

# Получить общую информацию о человеке для определенного идентификатора.

person = Person()
p = person.details(12)

print(p.name)
print(p.biography)

# Находите фильмы по разным типам данных, таким как средний рейтинг, количество голосов, жанры и сертификаты.






# Находите телешоу по разным типам данных, таким как средний рейтинг, количество голосов, жанры, сеть, в которой они транслировались, и даты выхода в эфир.


# Какие телешоу самые популярные?

show = discover.discover_tv_shows({
    'sort_by': 'popularity.desc'
})

# Какие драмы самые лучшие?

show = discover.discover_tv_shows({
    'with_genres': 18,
    'sort_by': 'vote_average.desc',
    'vote_count.gte': 10
})

# Login to your account and add some movie recommendations to your TMDb watchlist.

from tmdbv3api import Account
from tmdbv3api import Authentication
from tmdbv3api import TMDb, Movie

USERNAME = "YOUR_USERNAME"
PASSWORD = "YOUR_PASSWORD"

tmdb = TMDb()
tmdb.api_key = "YOUR_API_KEY"

auth = Authentication(username=USERNAME, password=PASSWORD)

account = Account()
details = account.details()

print("You are logged in as %s. Your account ID is %s." % (details.username, details.id))
print("This session expires at: %s" % auth.expires_at)

movie = Movie()

s = movie.search("Gangs of New York")
first_result = s[0]
recommendations = movie.recommendations(first_result.id)

for recommendation in recommendations:
    print("Adding %s (%s) to watchlist." % (recommendation.title, recommendation.release_date))
    account.add_to_watchlist(details.id, recommendation.id, "movie")
Running Tests

#You can run the tests via the command line. You must export your TMDb API key as an environment variable. From the command line run:

$ export TMDB_API_KEY='YOUR_API_KEY'
Then run:

$ python -m unittest discover tests/